// <auto-generated />
using System;
using ExamApplication.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ExamApplication.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250520084907_Seeding data")]
    partial class Seedingdata
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ExamApplication.Models.Entities.Answer", b =>
                {
                    b.Property<long>("AnswerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("AnswerId"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<long>("QuestionId")
                        .HasColumnType("bigint");

                    b.HasKey("AnswerId");

                    b.HasIndex("QuestionId");

                    b.ToTable("Answers");

                    b.HasData(
                        new
                        {
                            AnswerId = 1L,
                            Content = "1890",
                            IsCorrect = true,
                            QuestionId = 1L
                        },
                        new
                        {
                            AnswerId = 2L,
                            Content = "1900",
                            IsCorrect = false,
                            QuestionId = 1L
                        },
                        new
                        {
                            AnswerId = 3L,
                            Content = "1885",
                            IsCorrect = false,
                            QuestionId = 1L
                        },
                        new
                        {
                            AnswerId = 4L,
                            Content = "1911",
                            IsCorrect = false,
                            QuestionId = 1L
                        },
                        new
                        {
                            AnswerId = 5L,
                            Content = "1945",
                            IsCorrect = true,
                            QuestionId = 2L
                        },
                        new
                        {
                            AnswerId = 6L,
                            Content = "1930",
                            IsCorrect = false,
                            QuestionId = 2L
                        },
                        new
                        {
                            AnswerId = 7L,
                            Content = "1954",
                            IsCorrect = false,
                            QuestionId = 2L
                        },
                        new
                        {
                            AnswerId = 8L,
                            Content = "1975",
                            IsCorrect = false,
                            QuestionId = 2L
                        },
                        new
                        {
                            AnswerId = 9L,
                            Content = "1954",
                            IsCorrect = true,
                            QuestionId = 3L
                        },
                        new
                        {
                            AnswerId = 10L,
                            Content = "1946",
                            IsCorrect = false,
                            QuestionId = 3L
                        },
                        new
                        {
                            AnswerId = 11L,
                            Content = "1975",
                            IsCorrect = false,
                            QuestionId = 3L
                        },
                        new
                        {
                            AnswerId = 12L,
                            Content = "1930",
                            IsCorrect = false,
                            QuestionId = 3L
                        },
                        new
                        {
                            AnswerId = 13L,
                            Content = "1225",
                            IsCorrect = true,
                            QuestionId = 4L
                        },
                        new
                        {
                            AnswerId = 14L,
                            Content = "938",
                            IsCorrect = false,
                            QuestionId = 4L
                        },
                        new
                        {
                            AnswerId = 15L,
                            Content = "1010",
                            IsCorrect = false,
                            QuestionId = 4L
                        },
                        new
                        {
                            AnswerId = 16L,
                            Content = "1400",
                            IsCorrect = false,
                            QuestionId = 4L
                        },
                        new
                        {
                            AnswerId = 17L,
                            Content = "1885",
                            IsCorrect = true,
                            QuestionId = 5L
                        },
                        new
                        {
                            AnswerId = 18L,
                            Content = "1858",
                            IsCorrect = false,
                            QuestionId = 5L
                        },
                        new
                        {
                            AnswerId = 19L,
                            Content = "1945",
                            IsCorrect = false,
                            QuestionId = 5L
                        },
                        new
                        {
                            AnswerId = 20L,
                            Content = "1975",
                            IsCorrect = false,
                            QuestionId = 5L
                        },
                        new
                        {
                            AnswerId = 21L,
                            Content = "Fansipan",
                            IsCorrect = true,
                            QuestionId = 6L
                        },
                        new
                        {
                            AnswerId = 22L,
                            Content = "Hoàng Liên Sơn",
                            IsCorrect = false,
                            QuestionId = 6L
                        },
                        new
                        {
                            AnswerId = 23L,
                            Content = "Ba Vì",
                            IsCorrect = false,
                            QuestionId = 6L
                        },
                        new
                        {
                            AnswerId = 24L,
                            Content = "Langbiang",
                            IsCorrect = false,
                            QuestionId = 6L
                        },
                        new
                        {
                            AnswerId = 25L,
                            Content = "Sông Hồng",
                            IsCorrect = true,
                            QuestionId = 7L
                        },
                        new
                        {
                            AnswerId = 26L,
                            Content = "Sông Đà",
                            IsCorrect = false,
                            QuestionId = 7L
                        },
                        new
                        {
                            AnswerId = 27L,
                            Content = "Sông Mekong",
                            IsCorrect = false,
                            QuestionId = 7L
                        },
                        new
                        {
                            AnswerId = 28L,
                            Content = "Sông Cửu Long",
                            IsCorrect = false,
                            QuestionId = 7L
                        },
                        new
                        {
                            AnswerId = 29L,
                            Content = "Vịnh Hạ Long",
                            IsCorrect = true,
                            QuestionId = 8L
                        },
                        new
                        {
                            AnswerId = 30L,
                            Content = "Vịnh Cam Ranh",
                            IsCorrect = false,
                            QuestionId = 8L
                        },
                        new
                        {
                            AnswerId = 31L,
                            Content = "Vịnh Vân Phong",
                            IsCorrect = false,
                            QuestionId = 8L
                        },
                        new
                        {
                            AnswerId = 32L,
                            Content = "Vịnh Quy Nhơn",
                            IsCorrect = false,
                            QuestionId = 8L
                        },
                        new
                        {
                            AnswerId = 33L,
                            Content = "Hà Nội",
                            IsCorrect = true,
                            QuestionId = 9L
                        },
                        new
                        {
                            AnswerId = 34L,
                            Content = "Huế",
                            IsCorrect = false,
                            QuestionId = 9L
                        },
                        new
                        {
                            AnswerId = 35L,
                            Content = "Hồ Chí Minh",
                            IsCorrect = false,
                            QuestionId = 9L
                        },
                        new
                        {
                            AnswerId = 36L,
                            Content = "Đà Nẵng",
                            IsCorrect = false,
                            QuestionId = 9L
                        },
                        new
                        {
                            AnswerId = 37L,
                            Content = "Cà Mau",
                            IsCorrect = true,
                            QuestionId = 10L
                        },
                        new
                        {
                            AnswerId = 38L,
                            Content = "Kiên Giang",
                            IsCorrect = false,
                            QuestionId = 10L
                        },
                        new
                        {
                            AnswerId = 39L,
                            Content = "An Giang",
                            IsCorrect = false,
                            QuestionId = 10L
                        },
                        new
                        {
                            AnswerId = 40L,
                            Content = "Bạc Liêu",
                            IsCorrect = false,
                            QuestionId = 10L
                        });
                });

            modelBuilder.Entity("ExamApplication.Models.Entities.Question", b =>
                {
                    b.Property<long>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("QuestionId"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("QuizId")
                        .HasColumnType("bigint");

                    b.HasKey("QuestionId");

                    b.HasIndex("QuizId");

                    b.ToTable("Questions");

                    b.HasData(
                        new
                        {
                            QuestionId = 1L,
                            Content = "Bác Hồ sinh năm bao nhiêu?",
                            QuizId = 1L
                        },
                        new
                        {
                            QuestionId = 2L,
                            Content = "Nước Việt Nam Dân chủ Cộng hòa ra đời năm nào?",
                            QuizId = 1L
                        },
                        new
                        {
                            QuestionId = 3L,
                            Content = "Chiến dịch Điện Biên Phủ diễn ra năm nào?",
                            QuizId = 1L
                        },
                        new
                        {
                            QuestionId = 4L,
                            Content = "Nhà Trần thành lập năm bao nhiêu?",
                            QuizId = 1L
                        },
                        new
                        {
                            QuestionId = 5L,
                            Content = "Phong trào Cần Vương bùng nổ năm nào?",
                            QuizId = 1L
                        },
                        new
                        {
                            QuestionId = 6L,
                            Content = "Đỉnh núi cao nhất Việt Nam là?",
                            QuizId = 2L
                        },
                        new
                        {
                            QuestionId = 7L,
                            Content = "Sông dài nhất Việt Nam là?",
                            QuizId = 2L
                        },
                        new
                        {
                            QuestionId = 8L,
                            Content = "Vịnh nổi tiếng ở Quảng Ninh là?",
                            QuizId = 2L
                        },
                        new
                        {
                            QuestionId = 9L,
                            Content = "Thủ đô của Việt Nam là?",
                            QuizId = 2L
                        },
                        new
                        {
                            QuestionId = 10L,
                            Content = "Tỉnh nào nằm ở cực Nam của Việt Nam?",
                            QuizId = 2L
                        });
                });

            modelBuilder.Entity("ExamApplication.Models.Entities.Quiz", b =>
                {
                    b.Property<long>("QuizId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("QuizId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PassPercent")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("QuizId");

                    b.ToTable("Quizes");

                    b.HasData(
                        new
                        {
                            QuizId = 1L,
                            Description = "Kiểm tra kiến thức lịch sử Việt Nam",
                            PassPercent = 60,
                            Title = "Trắc nghiệm Lịch sử"
                        },
                        new
                        {
                            QuizId = 2L,
                            Description = "Kiểm tra kiến thức địa lý cơ bản",
                            PassPercent = 70,
                            Title = "Trắc nghiệm Địa lý"
                        });
                });

            modelBuilder.Entity("ExamApplication.Models.Entities.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Fullname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ExamApplication.Models.Entities.UserAnswer", b =>
                {
                    b.Property<long>("UserAnswerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("UserAnswerId"));

                    b.Property<long>("AnswerId")
                        .HasColumnType("bigint");

                    b.Property<long>("DoExamId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.Property<long>("QuestionId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserDoExamDoExamId")
                        .HasColumnType("bigint");

                    b.HasKey("UserAnswerId");

                    b.HasIndex("UserDoExamDoExamId");

                    b.ToTable("UserAnswers");
                });

            modelBuilder.Entity("ExamApplication.Models.Entities.UserDoExam", b =>
                {
                    b.Property<long>("DoExamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("DoExamId"));

                    b.Property<DateTime>("Endtime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Passed")
                        .HasColumnType("bit");

                    b.Property<long>("QuizId")
                        .HasColumnType("bigint");

                    b.Property<float>("Score")
                        .HasColumnType("real");

                    b.Property<DateTime>("Starttime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("DoExamId");

                    b.HasIndex("QuizId");

                    b.HasIndex("UserId");

                    b.ToTable("AttemptExam");
                });

            modelBuilder.Entity("ExamApplication.Models.Entities.Answer", b =>
                {
                    b.HasOne("ExamApplication.Models.Entities.Question", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("ExamApplication.Models.Entities.Question", b =>
                {
                    b.HasOne("ExamApplication.Models.Entities.Quiz", "Quiz")
                        .WithMany("Questions")
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Quiz");
                });

            modelBuilder.Entity("ExamApplication.Models.Entities.UserAnswer", b =>
                {
                    b.HasOne("ExamApplication.Models.Entities.UserDoExam", "UserDoExam")
                        .WithMany()
                        .HasForeignKey("UserDoExamDoExamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserDoExam");
                });

            modelBuilder.Entity("ExamApplication.Models.Entities.UserDoExam", b =>
                {
                    b.HasOne("ExamApplication.Models.Entities.Quiz", "Quiz")
                        .WithMany()
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ExamApplication.Models.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Quiz");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ExamApplication.Models.Entities.Question", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("ExamApplication.Models.Entities.Quiz", b =>
                {
                    b.Navigation("Questions");
                });
#pragma warning restore 612, 618
        }
    }
}
